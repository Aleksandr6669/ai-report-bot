# -*- coding: utf-8 -*-
import flet as ft
import json
import os
import pyautogui
from datetime import datetime
import threading
import telebot
import base64
from google import genai
from google.genai import types
import re
from io import BytesIO

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
INSTRUCTION_FILE = "instruction.json"
TELEGRAM_TOKEN_FILE = "telegram_token.json"
GEMINI_TOKEN_FILE = "gemini_token.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
saved_instruction = ""
telegram_token = ""
gemini_token = ""
bot = None
is_bot_running = False
bot_thread = None

def load_instruction():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    global saved_instruction
    try:
        if os.path.exists(INSTRUCTION_FILE):
            with open(INSTRUCTION_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                saved_instruction = data.get('instruction', '')
                return saved_instruction
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
    return ""

def save_instruction_to_file(instruction):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —Ñ–∞–π–ª"""
    try:
        with open(INSTRUCTION_FILE, 'w', encoding='utf-8') as f:
            json.dump({'instruction': instruction}, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
        return False

def load_telegram_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–∑ —Ñ–∞–π–ª–∞"""
    global telegram_token
    try:
        if os.path.exists(TELEGRAM_TOKEN_FILE):
            with open(TELEGRAM_TOKEN_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                telegram_token = data.get('token', '')
                return telegram_token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ Telegram: {e}")
    return ""

def save_telegram_token(token):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω Telegram –≤ —Ñ–∞–π–ª"""
    try:
        with open(TELEGRAM_TOKEN_FILE, 'w', encoding='utf-8') as f:
            json.dump({'token': token}, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram: {e}")
        return False

def load_gemini_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω Gemini –∏–∑ —Ñ–∞–π–ª–∞"""
    global gemini_token
    try:
        if os.path.exists(GEMINI_TOKEN_FILE):
            with open(GEMINI_TOKEN_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                gemini_token = data.get('token', '')
                return gemini_token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ Gemini: {e}")
    return ""

def save_gemini_token(token):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω Gemini –≤ —Ñ–∞–π–ª"""
    try:
        with open(GEMINI_TOKEN_FILE, 'w', encoding='utf-8') as f:
            json.dump({'token': token}, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Gemini: {e}")
        return False

def take_screenshot_as_bytes():
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –±–∞–π—Ç—ã"""
    try:
        screenshot = pyautogui.screenshot()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
        buffer = BytesIO()
        screenshot.save(buffer, format="PNG")
        buffer.seek(0)
        return buffer.getvalue()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None

def generate_report_with_gemini(image_bytes, instruction):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç —Å –ø–æ–º–æ—â—å—é Gemini API"""
    global gemini_token
    if not gemini_token:
        return "‚ùå –û—à–∏–±–∫–∞: Gemini API —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω."

    try:
        client = genai.Client(api_key=gemini_token)
        model = "gemini-2.0-flash"
        
        contents = [
            types.Content(
                role="user",
                parts=[
                    types.Part.from_text(text=instruction),
                    types.Part.from_bytes(
                        mime_type="image/png",
                        data=image_bytes,
                    ),
                ],
            ),
        ]
        
        full_report = ""
        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents
        ):
            full_report += chunk.text
        
        return full_report
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}"

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è MarkdownV2."""
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(r'([%s])' % re.escape(escape_chars), r'\\\1', text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º telebot ---
def telegram_bot_worker():
    global bot, is_bot_running

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(telebot.types.KeyboardButton('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç'))

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç.",
            reply_markup=keyboard
        )
    
    @bot.message_handler(func=lambda message: message.text == '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç')
    def handle_report_button(message):
        global saved_instruction, gemini_token
        
        if not gemini_token:
            bot.send_message(
                message.chat.id, 
                "‚ùå Gemini API —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."
            )
            return

        if not saved_instruction:
            bot.send_message(
                message.chat.id, 
                "‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –æ—Ç—á—ë—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."
            )
            return

        bot.send_message(message.chat.id, "ü§ñ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini...")
        
        screenshot_bytes = take_screenshot_as_bytes()
        if not screenshot_bytes:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            return

        try:
            report_text = generate_report_with_gemini(screenshot_bytes, saved_instruction)
            
            # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã ``` –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞
            cleaned_report_text = report_text.replace("```", "")
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            escaped_report_text = escape_markdown(cleaned_report_text)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –æ—Ç—á—ë—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏
            bot.send_photo(
                message.chat.id,
                photo=screenshot_bytes,
                caption=f"{escaped_report_text}",
                parse_mode='MarkdownV2'
            )
            
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        is_bot_running = False

def main(page: ft.Page):
    page.title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ Telegram/Gemini –±–æ—Ç–æ–≤"
    page.theme_mode = ft.ThemeMode.LIGHT
    page.padding = 20
    
    global saved_instruction, telegram_token, gemini_token, bot, is_bot_running, bot_thread
    
    saved_instruction = load_instruction()
    telegram_token = load_telegram_token()
    gemini_token = load_gemini_token()
    
    status_indicator = ft.Text(size=14, weight=ft.FontWeight.BOLD)
    bot_control_button = ft.ElevatedButton()

    def update_bot_status_ui():
        if is_bot_running:
            status_indicator.value = "–ë–æ—Ç: –ó–∞–ø—É—â–µ–Ω ‚úÖ"
            status_indicator.color = "green"
            bot_control_button.text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            bot_control_button.bgcolor = "red"
        else:
            status_indicator.value = "–ë–æ—Ç: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå"
            status_indicator.color = "red"
            bot_control_button.text = "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
            bot_control_button.bgcolor = "green"
        page.update()

    def start_bot():
        global bot, is_bot_running, telegram_token, bot_thread
        if not telegram_token:
            status_text.value = "‚ùå –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram."
            status_text.color = "red"
            page.update()
            return
        
        try:
            bot = telebot.TeleBot(telegram_token)
            bot_thread = threading.Thread(target=telegram_bot_worker, daemon=True)
            bot_thread.start()
            is_bot_running = True
            update_bot_status_ui()
            print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            status_text.value = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}"
            status_text.color = "red"
            is_bot_running = False
            update_bot_status_ui()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

    def stop_bot():
        global bot, is_bot_running, bot_thread
        if bot:
            bot.stop_polling()
            if bot_thread and bot_thread.is_alive():
                bot_thread.join(timeout=5)
            is_bot_running = False
            update_bot_status_ui()
            print("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
    def toggle_bot_status(e):
        if is_bot_running:
            stop_bot()
        else:
            start_bot()

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
    telegram_token_field = ft.TextField(
        label="–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞",
        hint_text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞...",
        password=True,
        expand=True,
        value=telegram_token,
    )

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ Gemini
    gemini_token_field = ft.TextField(
        label="–¢–æ–∫–µ–Ω Gemini API",
        hint_text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Gemini API...",
        password=True,
        expand=True,
        value=gemini_token,
    )
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instruction_field = ft.TextField(
        label="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Gemini",
        hint_text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É')...",
        multiline=True,
        min_lines=3,
        max_lines=10, 
        expand=True,
        value=saved_instruction,
    )
    
    status_text = ft.Text("", size=14)
    saved_instruction_text = ft.Text(
        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {saved_instruction[:50]}..." if saved_instruction else "",
        size=12, 
        color="blue"
    )

    def save_instruction(e):
        global saved_instruction
        if not instruction_field.value:
            status_text.value = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!"
            status_text.color = "red"
        else:
            saved_instruction = instruction_field.value
            if save_instruction_to_file(saved_instruction):
                status_text.value = "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
                status_text.color = "green"
                saved_instruction_text.value = (
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {saved_instruction[:50]}..."
                )
            else:
                status_text.value = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª!"
                status_text.color = "red"
        
        page.update()
    
    def save_telegram_token_handler(e):
        global telegram_token
        if not telegram_token_field.value:
            status_text.value = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram!"
            status_text.color = "red"
        else:
            telegram_token = telegram_token_field.value
            if save_telegram_token(telegram_token):
                status_text.value = "‚úÖ –¢–æ–∫–µ–Ω Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
                status_text.color = "green"
                if is_bot_running:
                    stop_bot()
                    start_bot()
            else:
                status_text.value = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram!"
                status_text.color = "red"
        page.update()
    
    def save_gemini_token_handler(e):
        global gemini_token
        if not gemini_token_field.value:
            status_text.value = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Gemini!"
            status_text.color = "red"
        else:
            gemini_token = gemini_token_field.value
            if save_gemini_token(gemini_token):
                status_text.value = "‚úÖ –¢–æ–∫–µ–Ω Gemini —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
                status_text.color = "green"
            else:
                status_text.value = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Gemini!"
                status_text.color = "red"
        page.update()
    
    def clear_instruction(_):
        global saved_instruction
        saved_instruction = ""
        instruction_field.value = ""
        status_text.value = "üóëÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞!"
        status_text.color = "orange"
        saved_instruction_text.value = ""
        
        try:
            if os.path.exists(INSTRUCTION_FILE):
                os.remove(INSTRUCTION_FILE)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        page.update()
    
    save_instruction_button = ft.ElevatedButton(
        text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        icon="SAVE",
        on_click=save_instruction,
        expand=True
    )
    
    clear_instruction_button = ft.ElevatedButton(
        text="–û—á–∏—Å—Ç–∏—Ç—å",
        icon="DELETE",
        on_click=clear_instruction,
        expand=True
    )
    
    save_telegram_token_button = ft.ElevatedButton(
        text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω",
        icon="SAVE",
        on_click=save_telegram_token_handler
    )

    save_gemini_token_button = ft.ElevatedButton(
        text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω",
        icon="SAVE",
        on_click=save_gemini_token_handler
    )

    bot_control_button.on_click = toggle_bot_status
    update_bot_status_ui()
    
    if telegram_token:
        start_bot()

    page.add(
        ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∏ Gemini –±–æ—Ç–æ–≤",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.Container(height=10),
                    ft.Row(
                        controls=[
                            telegram_token_field,
                            save_telegram_token_button,
                            bot_control_button
                        ],
                        alignment=ft.MainAxisAlignment.START,
                        spacing=10
                    ),
                    ft.Container(height=10),
                    ft.Row(
                        controls=[
                            gemini_token_field,
                            save_gemini_token_button
                        ],
                        alignment=ft.MainAxisAlignment.START,
                        spacing=10
                    ),
                    ft.Container(height=20),
                    ft.Divider(height=20),
                    ft.Row(
                        controls=[
                            status_indicator,
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                    ft.Divider(height=20),
                    ft.Text(
                        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ Gemini",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.Container(height=10),
                    instruction_field,
                    ft.Container(height=20),
                    ft.Row(
                        controls=[
                            save_instruction_button, 
                            clear_instruction_button
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        spacing=20
                    ),
                    ft.Container(height=20),
                    status_text,
                    ft.Container(height=10),
                    saved_instruction_text,
                ],
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=10,
            ),
            alignment=ft.alignment.center,
        )
    )

ft.app(target=main)